// Generated by CoffeeScript 1.7.1
var formatsJson,
  __slice = [].slice;

formatsJson = require('../data/formats.json');

module.exports = function(moment) {
  var geomoment, key, stubbedTime, tzid, val, zone, zones, _fn, _ref;
  stubbedTime = null;
  geomoment = function() {
    var args, first;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (stubbedTime != null) {
      first = args[0];
      if (moment.isMoment(first)) {

      } else if (first == null) {
        args[0] = stubbedTime.clone();
      } else if (typeof first === 'object') {
        if (!((first.y != null) || (first.year != null) || (first.years != null))) {
          first.year = stubbedTime.year();
        }
        if (!((first.M != null) || (first.month != null) || (first.months != null))) {
          first.month = stubbedTime.month();
        }
        if (!((first.d != null) || (first.day != null) || (first.days != null))) {
          first.day = stubbedTime.date();
        }
      }
    }
    return moment.apply(null, args);
  };
  for (key in moment) {
    val = moment[key];
    geomoment[key] = val;
  }
  geomoment.tz = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if ((stubbedTime != null) && (args[1] == null)) {
      return stubbedTime.clone().tz(args[0]);
    } else {
      return moment.tz.apply(null, args);
    }
  };
  _ref = moment.tz;
  for (key in _ref) {
    val = _ref[key];
    geomoment.tz[key] = val;
  }
  geomoment.formats = formatsJson;
  geomoment.day = function(day, tzid) {
    var formats;
    formats = geomoment.formats;
    return moment.tz(day, [formats.day, formats.iCalDay, formats.slashDay], tzid);
  };
  geomoment.fn.dayString = function() {
    return this.format(geomoment.formats.day);
  };
  zones = {
    eastern: 'America/New_York',
    central: 'America/Chicago',
    mountain: 'America/Denver',
    pacific: 'America/Los_Angeles'
  };
  _fn = function(zone, tzid) {
    geomoment[zone] = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      args.push(tzid);
      return geomoment.tz.apply(this, args);
    };
    return geomoment[zone].tzid = tzid;
  };
  for (zone in zones) {
    tzid = zones[zone];
    _fn(zone, tzid);
  }
  geomoment.stubTime = function(time) {
    return stubbedTime = moment(time);
  };
  geomoment.restoreTime = function() {
    return stubbedTime = null;
  };
  return geomoment;
};
